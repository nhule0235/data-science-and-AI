# -*- coding: utf-8 -*-
"""Bản sao của Assignment: HME recognition-ColabVersion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e1Osi-AGbbs_uKWincuwoklX7vnonDra
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
ntcuong2103_crohme2019_path = kagglehub.dataset_download('ntcuong2103/crohme2019')

print('Data source import complete.')

# If it is failed, run the above cell again to fix
assert ntcuong2103_crohme2019_path == "/kaggle/input/crohme2019"

""">>[CROHME Temporal Sequence Classification (CROHME-CTC) Baseline](#scrollTo=DEm0-zzfGomG)

>>[Dependencies](#scrollTo=UjJVUXAGGomH)

>>[Overview of the dataset](#scrollTo=VFGrDs0lI0Gw)

>>[Task 1: Build Vocabulary](#scrollTo=ZGmVmcPDGomI)

>>[Task 2: Build Dataset](#scrollTo=Uw6QUu6EGomJ)

>>>[Dataflow](#scrollTo=PomjANK6GomJ)

>>>[Handling Inkml files](#scrollTo=r9zozRQ8GomJ)

>>>[Build Dataset](#scrollTo=G9dQJ7TTGomJ)

>>>[Feature representation](#scrollTo=3ugfZokVGomK)

>>>>[CHECK LIST](#scrollTo=_LJH9zHvGomK)

>>[Task 3: Build Lightning Data Module via Dataloader](#scrollTo=O3GGK6yRGomK)

>>[Task 4: Build Model](#scrollTo=JzRl-DlmGomL)

>>[Task 5: Understand CTC Loss](#scrollTo=e6V0E9xSGomP)

>>[Task 6: Build Lightning Module](#scrollTo=qvim4uxsGomP)

>>[Task 7: Train the Model with PyTorch Lightning](#scrollTo=9D8zzyWkGomQ)

>>[Task 8: Test your model](#scrollTo=QSITSKLPGomQ)

>>[Task 9: Inference](#scrollTo=pm8LQ8zPGomQ)

>>[Task 10: Implement calculation metric for training](#scrollTo=x6ps24sSGomR)

>>[BONUS TASKS](#scrollTo=o9YVut4FGomR)

>>>[Bonus 1: Add metric to evaluate accuracy of symbols and relations seperately (+0.5pt)](#scrollTo=o9YVut4FGomR)

>>>[Bonus 2: Modify loss function to constraint the output of relations at the time step of pen-up (+1pt)](#scrollTo=o9YVut4FGomR)

>>>[Bonus 3: Visualize model prediction by timesteps and probability of softmax outputs (+0.5pt)](#scrollTo=o9YVut4FGomR)

>>>[Bonus 4: Use CUDA CTC Decoder to optimize decoding process in model (+0.5pt)](#scrollTo=o9YVut4FGomR)

## **CROHME Temporal Sequence Classification (CROHME-CTC) Baseline**

In this project, we will build and train a recurrent neural network (RNN) for translating handwritten mathematical expressions into sequence of symbols and relations based on Symbol Relation Tree and CROHME dataset.

The model we'll be using is a simple RNN with a single layer of Bidirectional LSTM cells. We will use Connectionist Temporal Classification (CTC) loss to train the model.

The model is trained on the CROHME dataset, which contains handwritten mathematical expressions in the form of Symbol Relation Trees. The dataset is preprocessed and converted into a sequence of symbols and relations, which is used as the input to the model.

Your job is to feature engineer the input data and train the model to achieve the best performance possible. Additionally, consider implementing data augmentation techniques to enhance the training dataset.

Some features from the project:

*   Public competition dataset: CROHME https://paperswithcode.com/dataset/crohme-2019
*   Advance data preparation: time series feature extraction, collate function
*   High level API of pytorch lightning
*   Experiment tracking with Weight and Biases

## Dependencies
"""

!pip -q install pytorch-lightning torchmetrics wandb

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
from torchmetrics.text import EditDistance

import numpy as np
import pandas as pd
import os

import pytorch_lightning as pl
from pytorch_lightning import Trainer
from pytorch_lightning.callbacks import ModelCheckpoint, LearningRateMonitor
from pytorch_lightning.loggers import TensorBoardLogger, WandbLogger
import wandb

import xml.etree.ElementTree as ET
from torch.nn.utils.rnn import pad_sequence

import matplotlib.pyplot as plt
from collections.abc import Sequence
from typing import Literal, Optional, Union

import json

# mount crohme2019 -> dataset
!ln -s /kaggle/input/crohme2019 dataset

"""> The above command created a symbolic link
> dataset -> /kaggle/input/crohme2019
>
> We can now access the dataset from current directory instead of /kaggle/input
"""

# This code for displaying current directory tree, you don't need to run.

!sudo apt-get install tree
!tree -L 3 dataset

"""## Overview of the dataset

This is the folder structure of the dataset.

```
dataset
├── crohme2019
│   └── crohme2019
│       ├── test
│       ├── train
│       └── valid
├── crohme2019_test.txt
├── crohme2019_train.txt
└── crohme2019_valid.txt
```

There are two parts:
* Inkml files: XML based files containing handwriting data (sequences of handwritten strokes) captured from the devices.
```
dataset
├── crohme2019
│   └── crohme2019
│       ├── test
│       ├── train
│       └── valid
```
* Annotation files: Containing the labels for each input handwriting samples.
```
dataset
├── crohme2019_test.txt
├── crohme2019_train.txt
└── crohme2019_valid.txt
```

> An example of inkml file, the points (x, y coords) are recorded in each trace (handwritten stroke).

```
<ink xmlns="http://www.w3.org/2003/InkML">
<traceFormat>
<channel name="X" type="decimal"/>
<channel name="Y" type="decimal"/>
</traceFormat>
...

<trace id="0">
241 123, 240 123, 239 123, 238 123, 237 123, 236 123, 236 122, 237 122, 238 122, 240 122, 242 122, 244 122, 247 122, 251 121, 254 121, 257 121, 260 120, 262 120, 265 120, 266 120, 267 120, 268 120, 269 120, 268 120
</trace>
<trace id="1">
301 123, 300 124, 299 124, 298 124, 297 124, 296 124, 295 124, 294 124, 295 124, 296 124, 297 124, 298 124, 299 123, 301 123, 302 123, 303 123, 304 122, 305 122, 306 122, 307 122, 308 122, 310 122, 311 122, 314 122, 316 121, 317 121, 319 121, 321 121, 323 121, 328 120, 330 120, 332 120, 333 120, 335 120, 336 120, 344 119, 346 119, 348 119, 350 119, 352 119, 357 119, 358 119, 360 119, 362 119, 364 119, 365 119, 370 119, 372 119, 373 119, 374 119, 375 119, 377 119, 377 118, 376 118, 374 118, 372 118
</trace>
<trace id="2">
318 89, 319 89, 320 89, 321 88, 323 87, 324 86, 325 84, 326 83, 327 82, 328 80, 329 79, 330 77, 331 75, 332 74, 333 73, 333 72, 333 73, 333 75, 333 76, 333 78, 333 80, 332 81, 332 83, 332 85, 332 86, 332 88, 332 90, 332 92, 332 93, 333 95, 333 97, 333 98, 333 100, 333 101, 333 102, 333 103, 333 104, 333 103, 333 101, 332 99
</trace>
<trace id="3">
302 148, 301 148, 302 147, 302 146, 303 145, 304 144, 305 143, 306 142, 307 140, 308 139, 308 138, 308 137, 308 136, 308 137, 308 138, 309 139, 309 140, 309 141, 309 142, 309 144, 309 146, 309 147, 309 149, 309 151, 309 153, 309 155, 309 157, 310 159, 310 162, 310 164, 310 169, 310 171, 310 172, 310 174, 311 175, 311 179, 311 180, 311 181, 311 182, 311 181
</trace>
...

</ink>

```

> An example of annotation file: left part is inkml file path, right part is the label (target) for that inkml file.

```
...
crohme2019/test/UN19_1041_em_597.inkml	- Right \sqrt Inside 2
crohme2019/test/UN19_1019_em_256.inkml	a Right n Right y
crohme2019/test/UN19_1033_em_474.inkml	V Sub n Right - Right 1 NoRel = Right \int Right d Sup n Right - Right 1 NoRel x Right \sqrt Inside h

...
```

> The label is a sequence of **symbols** and **spatial relations** between symbols (based on writing order).

## Task 1: Build Vocabulary

Builds and manages a vocabulary for converting characters (tokens) to indices (encoding) and vice-versa (decoding). This is essential for processing text data in machine learning tasks, particularly for sequence-to-sequence models like those used in handwriting recognition or mathematical expression translation.

In this project, the vocabulary is for encoding the target sequence (for example: "- Right \\sqrt Inside 2") into a sequence of indices ([5, 37, 74, 30, 10]). It is constructed from multiple annotation files (train, test, and validation sets) and includes a special blank character (this is for CTC loss). It supports encoding (tokens to indices) and decoding (indices to tokens) operations.


> _You will need to build the `class Vocab` using the two functions provided. Also the vocabulary should be exported as a JSON file so that we can reuse it later in the dataset._

***Input***: the path to the dataset files _(train, valid, and test)_.


```python
paths = [
    "dataset/crohme2019_train.txt",
    "dataset/crohme2019_test.txt",
    "dataset/crohme2019_valid.txt",
]
```

***Output***: the vocabulary.

```python
vocab = {
    "a": 0,
    "b": 1,
    "c": 2,
    ...
}
```
"""

paths = [
    "dataset/crohme2019_train.txt",
    "dataset/crohme2019_test.txt",
    "dataset/crohme2019_valid.txt",
]

df = pd.read_csv(paths[1], sep="\t", header=None, names=["path", "label"]).dropna().astype(str)

df.head()

def get_unique_chars(paths) -> set:
    res = set()
    for i in df['label'].apply(lambda x: x.strip().split()):
        res.update(i)
    return res

len(get_unique_chars(paths[0]))

unique_chars = get_unique_chars(paths[0])
unique_chars

"""The vocabulary should be sorted by ascii table. The first character (index 0) must be blank (`''`)."""

def chr2idx(unique_chars: set) -> dict:
    unique_chars.add('')
    return {char: idx for idx, char in enumerate(sorted(unique_chars))}

vocab = chr2idx(get_unique_chars(paths[0]))

assert vocab[""] == 0
assert vocab["|"] == 108
assert vocab["\\pi"] == 68
assert vocab["\\exists"] == 51
assert len(vocab) == 109

class Vocab:
    """

    Attributes:
        paths (list): A list of file paths to the annotation files.
        char2idx (dict): A dictionary mapping characters to their corresponding indices.  This is the primary vocabulary.
        idx2char (dict): A reverse mapping from indices to characters, facilitating decoding.

    Methods:
        build_vocab(): Builds the vocabulary from the specified annotation files, sorting characters lexicographically and adding a blank character.
        get_vocab(): Returns the character-to-index vocabulary.
        save_vocab(path): Saves the vocabulary to a JSON file.
        encode(tokens): Converts a list of tokens (characters) into a list of their corresponding indices.
        decode(ids): Converts a list of indices back into a list of tokens (characters).
    """
    def __init__(self, vocab_file=None):
        self.char2idx = {}
        if vocab_file is not None:
            self.char2idx = json.load(open(vocab_file))
        self.idx2char = {v: k for k, v in self.char2idx.items()}

    def build_vocab(self, annotations) -> None:
        # TODO: build vocab from all annotation files
        vocab = {}
        temp = set()
        for i in range(len(annotations)):
          df = pd.read_csv(annotations[i], sep="\t", header=None, names=["path", "label"]).dropna().astype(str)
          for i in df['label'].apply(lambda x: x.strip().split()):
              temp.update(i)
        temp.add('')
        vocab = {char: idx for idx, char in enumerate(sorted(temp))}
        # assign vocab to the class
        self.char2idx = vocab
        self.idx2char = {v: k for k, v in vocab.items()}

    def get_vocab(self) -> dict:  # getter
        return self.char2idx
    def get_vocab_idx_2_char(self) -> dict:
        return self.idx2char

    def save_vocab(self, path: str) -> None:  # save vocab to json file
        with open(path, 'w') as f:
            json.dump(self.char2idx, f)

    def encode(self, tokens):
        return [self.char2idx[token] for token in tokens]

    def decode(self, ids):
        return [self.idx2char[id] for id in ids]

# CHECKPOINT: build vocab from annotations
annotations = [
    "dataset/crohme2019_train.txt",
    "dataset/crohme2019_test.txt",
    "dataset/crohme2019_valid.txt",
]

vocab = Vocab()
vocab.build_vocab(annotations)
vocab.save_vocab('vocab.json')

# TEST: vocab class loaded from prebuilt JSON
vocab = Vocab('vocab.json')

# encoding a sequence
input = '- Right \\sqrt Inside 2'.split()
encoded = vocab.encode(input)
decoded = vocab.decode(encoded)
print("Encoded:", encoded)
print("Decoded:", decoded)

assert vocab.encode(input) == [5, 37, 74, 30, 10]
assert vocab.decode(vocab.encode(input)) == input

"""## Task 2: Build Dataset

In this task, we will build a dataset class that will be used to load the dataset files _(train, valid, and test)_.

The dataset class will also be used to preprocess the data by converting the characters in the data to integers using the vocabulary.

> _Before going to this task, it is **highly recommended** to read this [Tutorial on creating Custom Dataset](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html#creating-a-custom-dataset-for-your-files) with PyTorch._
>
> _You should have basic understanding of required methods in the Dataset class such as `__init__`, `__len__`, and `__getitem__`._


***Input***: Dataset class should take the following arguments:.

- `annotation`: the path to the dataset annotation *(`.txt`)*.
- `root_dir`: the root directory of the dataset file.
- `vocab`: the vocabulary.

***Output***: the dataset class.

> *Note: You can adjust the Dataset class base on your references.*

### Dataflow
Below is a typical dataflow to train a model.
```mermaid
flowchart LR
    A[Raw Data] --> |parse| B[Cleaned Data]
    B --> |feature engineering| C[Dataset]
    C --> |package| D[DataLoader]
    D --> |load| E[Model]
    E --> |predict| F[Output]
    F --> |calculate| G[Loss]
    G --> |backpropagate| E
```

### Handling Inkml files

We have an inkml file: `crohme2019/test/UN19_1041_em_597.inkml`

Its label is `- Right \sqrt Inside 2`

Target would be: `[5, 37, 74, 30, 10]`, where the index here is the index of tokens (from a vocabulary)

We provided you with class `Inkml` to handle the parsing and processing of the inkml files. The main method you will use is `getTraces()` which returns the traces of the inkml file.

> _Inspect this class and understand how you should be working with this type of data._

```python
"""

import xml.etree.ElementTree as ET
import numpy as np
import matplotlib.pyplot as plt
from collections.abc import Sequence
from typing import Literal, Optional, Union

#@title Inkml class for reading (.inkml) files

class Segment(object):
    """Class to reprsent a Segment compound of strokes (id) with an id and label."""

    __slots__ = ("id", "label", "strId")

    def __init__(self, *args):
        if len(args) == 3:
            self.id = args[0]
            self.label = args[1]
            self.strId = args[2]
        else:
            self.id = "none"
            self.label = ""
            self.strId = set([])

class Inkml(object):
    """Class to represent an INKML file with strokes, segmentation and labels"""

    __slots__ = ("fileName", "strokes", "strkOrder", "segments", "truth", "UI")

    NS = {
        "ns": "http://www.w3.org/2003/InkML",
        "xml": "http://www.w3.org/XML/1998/namespace",
    }

    def __init__(self, *args):
        self.fileName = None
        self.strokes = {}
        self.strkOrder = []
        self.segments = {}
        self.truth = ""
        self.UI = ""
        if len(args) == 1:
            self.fileName = args[0]
            self.loadFromFile()

    def fixNS(self, ns, att):
        """Build the right tag or element name with namespace"""
        return "{" + Inkml.NS[ns] + "}" + att

    def loadFromFile(self):
        """load the ink from an inkml file (strokes, segments, labels)"""
        tree = ET.parse(self.fileName)
        # # ET.register_namespace();
        root = tree.getroot()
        for info in root.findall("ns:annotation", namespaces=Inkml.NS):
            if "type" in info.attrib:
                if info.attrib["type"] == "truth":
                    self.truth = info.text.strip()
                if info.attrib["type"] == "UI":
                    self.UI = info.text.strip()
        for strk in root.findall("ns:trace", namespaces=Inkml.NS):
            self.strokes[strk.attrib["id"]] = strk.text.strip()
            self.strkOrder.append(strk.attrib["id"])
        segments = root.find("ns:traceGroup", namespaces=Inkml.NS)
        if segments is None or len(segments) == 0:
            return
        for seg in segments.iterfind("ns:traceGroup", namespaces=Inkml.NS):
            id = seg.attrib[self.fixNS("xml", "id")]
            label = seg.find("ns:annotation", namespaces=Inkml.NS).text
            strkList = set([])
            for t in seg.findall("ns:traceView", namespaces=Inkml.NS):
                strkList.add(t.attrib["traceDataRef"])
            self.segments[id] = Segment(id, label, strkList)

    def getTraces(self, height=256):
        traces_array = [
            np.array(
                [p.strip().split() for p in self.strokes[id].split(",")], dtype="float"
            )
            for id in self.strkOrder
        ]

        ratio = height / (
            (
                np.concatenate(traces_array, 0).max(0)
                - np.concatenate(traces_array, 0).min(0)
            )[1]
            + 1e-6
        )
        return [(trace * ratio).astype(int).tolist() for trace in traces_array]

    def view(self):
        plt.figure(figsize = (16, 4))
        plt.axis("off")
        for trace in self.getTraces():
            trace_arr = np.array(trace)
            plt.plot(trace_arr[:, 0], -trace_arr[:, 1])  # invert y coordinate

inkml_path = 'dataset/crohme2019/crohme2019/test/ISICal19_1201_em_758.inkml'
ink = Inkml(inkml_path)
ink.view()

# Display shapes of first 5 traces in one file
traces = ink.getTraces() # list of trace, each trace is a list of points
# traces[0]
[np.array(trace).shape for trace in ink.getTraces()][:5]

"""> **REMARK**: _Some Inkml may return (x, y, t) coordinates, while most of them return (x, y) coordinates. Make sure to handle this inconsistency in your implementation._

### Build Dataset

For calculating the Connectionist Temporal Classification (CTC) loss, read the [expected output](https://pytorch.org/docs/stable/generated/torch.nn.CTCLoss.html) of this loss function from PyTorch.

> _Hint: focus on the shapes and the expected variables. (see code example for calculating loss)_
> ```python
> loss = ctc_loss(input_tensor, target_tensor, input_lengths, target_lengths)
> ```

**Base on the observation, how can we build a dataset class from the dataset files?**

> Hints:
>   - *Understand the big picture. (Dataflow)*
>   - *What informations needed to calculate our Loss?*
>   - *What should be returned in the `__getitem__` method?*
>   - *The outputs should be of Tensor type*
   
***References from pytorch [tutorials](https://pytorch.org/tutorials/beginner/data_loading_tutorial.html)***

`torch.utils.data.Dataset` is an abstract class representing a dataset. Your custom dataset should inherit `Dataset` and override the following methods:

- `__len__` so that `len(dataset)` returns the size of the dataset.

- `__getitem__` to support the indexing such that `dataset[i]` can be used to get ith sample.

### Feature representation

In this task, we will convert the strokes into feature representations that can be used by the model.

Initially, the `.getTraces()` method returns list of strokes, where each stroke is a list of (x, y) coordinates. Intuitively, we can use those coordinates as features. But if directly using the coordinates as features, the model will have a hard time learning the patterns.

Instead, we can calculate the difference *(∆d)* between consecutive coordinates as features. This way, the model can learn the patterns more easily.

$\Delta_x = x_{i+1} - x_i$ and $\Delta_y = y_{i+1} - y_i$

The feature would then be normalized as

($\frac{\Delta_x}{d}$ , $\frac{\Delta_y} {d}$), where $d = \sqrt{\Delta_x^2 + \Delta_y^2}$

**Pen-up and Pen-down**

In the dataset, each stroke is separated by a pen-up event. We can use this information to separate the strokes.

1. The pen is lifted from the paper (connecting the end of a stroke to the start of a stroke): $pen\_up = 1$
2. The pen is on the paper: $pen\_up = 0$

Then, our feature representation would be:
($\frac{\Delta_x}{d}$ , $\frac{\Delta_y} {d}$, $d$, $pen\_up$)


```
point 1: (x1, y1)
point 2: (x2, y2)
point 3: (x3, y3) <--- end of stroke #1
point 4: (x4, y4) <--- start of stroke #2
...
point n: (xn, yn)
```

The feature representation will be:

```
f1 = ((x2 - x1) / d, (y2 - y1)/d, d, 0)
f2 = ((x3 - x2) / d, (y3 - y2)/d, d, 0)
f3 = ((x4 - x3) / d, (y4 - y3)/d, d, 1) <-- pen up
...
fn-1 = ((xn - xn-1) / d, (yn - yn-1)/d, d, 0)
```

#### **CHECK LIST**

For each data sample, we will do the following steps
- Combine all the strokes into a single stroke (N, 2)
- Compute first order differences of x and y coordinates
- Compute Euclidean distances between consecutive points
- Remove any zero length consecutive points
- Normalize the x and y coordinates by Euclidean distance
- Add feature pen-up/pen-down

> *Features of transformed data: (delta traces, distance, pen_up_down)*

Label
- Define label (list of indices of the words)

Finally, we will convert the data and label to PyTorch tensors.
- Convert data and label to PyTorch tensors
"""

def feature_extraction(traces):
    feature = np.empty(1)

    # get lengths of each traces
    trace_lengths = [len(trace) for trace in traces]

    # cumulative sum of the lengths
    cum_trace_lengths = np.cumsum(trace_lengths)

    # number of points
    n_points = cum_trace_lengths[-1]

    # create pen-up/down features
    pen_up_down_feature = np.zeros(n_points - 1)

    pen_up_down_feature[cum_trace_lengths[:-1] - 1 ] = 1


    # - Combine all the strokes into a single stroke (N, 2)
    traces = np.concatenate(traces)
    # - Compute first order differences of x and y coordinates
    # deltas = np.diff(traces, axis=0)
    deltas = traces[1:] - traces[:-1] # delta_x, delta_y

    # print(deltas.shape) (3444, 2)
    # shape of deltas?

    # - Compute Euclidean distances between consecutive points
    distances = np.sqrt( np.sum(deltas * deltas, axis=1) )

    print (deltas.shape, distances.shape, pen_up_down_feature.shape)
    # concatenate features
    feature_concatenate = np.concatenate([deltas, distances[:, np.newaxis],
                                          pen_up_down_feature[:,np.newaxis]], axis=1)
    print(feature_concatenate.shape)
    # - Remove any zero-length distances between points

    # find index with zero-length distances
    # print(np.where(feature_concatenate[:, 2]  == 0)[0].shape)

    feature_without_zero_length = feature_concatenate[np.where(feature_concatenate[:, 2]  != 0)]
    print(feature_without_zero_length.shape)

    # feature_without_zero_length = np.delete(feature_concatenate, np.where(feature_concatenate[:, 2]  == 0)[0], axis=0)
    # print(feature_without_zero_length.shape)


    # - Normalize the x and y coordinates by Euclidean distance
    # (delta_x/d, delta_y/d, d, pen_up)
    feature_normalized = feature_without_zero_length.copy()
    # feature_normalized[:, 0] /= feature_without_zero_length[:, 2]
    # feature_normalized[:, 1] /= feature_without_zero_length[:, 2]
    feature_normalized[:, :2] /= feature_without_zero_length[:, 2][:, np.newaxis] # broadcasting (3444, 2) / (3444, 1)
    feature = feature_normalized
    # print(feature_normalized[:20, :])

    return feature

class InkmlDataset(Dataset):
    def __init__(self, annotation, root_dir, vocab):
        """
        Arguments:
            annotation (string): annotation file txt.
            root_dir (string): directory holds the dataset.
            vocab (set): of vocab.
        """
        self.annotation = annotation
        self.root_dir = root_dir
        self.vocab = vocab

        # load annotations
        self.inks = []
        self.labels = []

        # your code for create self.inks and self.labels from the annotation file
        if isinstance(annotation, str):
            annotation = [annotation]
        self.annotation_files = annotation

        for an_path in self.annotation_files:
            df = pd.read_csv(an_path, sep="\t", header=None, names=["path", "label"]).dropna().astype(str)
            for _, row in df.iterrows():
                inkml_path = os.path.join(self.root_dir, row["path"])
                self.inks.append(inkml_path)
                self.labels.append(row["label"])

    def __len__(self):
        """This code should return the number of samples in the dataset"""
        return len(self.labels)

    def __getitem__(self, idx):
        """This code should return the idx-th sample in the dataset"""

        ink = self.inks[idx]
        label = self.labels[idx]

        # TODO: feature engineering and return the correct data.
        #use to load and process file
        ink = Inkml(ink)
        traces = ink.getTraces()
        # if you want to check your implementation of feature engineering,
        # write the feature extraction function
        points = []
        pen_ups = []
        for i, stroke in enumerate(traces):
            arr = np.array(stroke)
            if arr.shape[0] < 2 or np.all(arr == arr[0]):
                continue
            for j, pt in enumerate(stroke):
                points.append(pt[:2])
                if i > 0 and j == 0:
                    pen_ups.append(1)
                else:
                    pen_ups.append(0)
        points = np.array(points, dtype=np.float32)
        deltas = np.diff(points, axis=0)
        mask = np.all(deltas == 0,axis=1)
        deltas = deltas[~mask]
        pen_ups_arr = np.array(pen_ups[1:])[~mask]
        # Euclidian distance
        dists = np.linalg.norm(deltas, axis=1) + 1e-8
        # Normalize
        norm_deltas = deltas / dists[:, None]
        # Features
        features = np.concatenate([norm_deltas, dists[:, None], pen_ups_arr[:, None]], axis=1)

        # Encode label
        label_tokens = label.strip().split()
        label_indices = self.vocab.encode(label_tokens)

        # Convert to tensors
        input_tensor = torch.tensor(features, dtype=torch.float32)
        target_tensor = torch.tensor(label_indices, dtype=torch.long)
        input_len = torch.tensor([input_tensor.shape[0]], dtype=torch.long)
        label_len = torch.tensor([len(label_indices)], dtype=torch.long)

        return input_tensor, target_tensor, input_len, label_len

len(traces), traces[0][:60]

#@title Sample solution of feature extraction
def feature_extraction(traces):
    feature = np.empty(1)
    # get the length of each strokes
    trace_lengths = [len(trace) for trace in traces]
    # total number of points
    n_points = sum(trace_lengths)
    # feature length = n_points - 1
    feature_length = n_points - 1

    # 1) pen-up feature

    # cumulative sum of the length
    cumsum_trace_lengths = np.cumsum(trace_lengths)
    # --> index of pen up
    pen_up_index = cumsum_trace_lengths - 1

    # initialize pen-up feature by a vector of all zeros
    pen_up_feature = np.zeros(feature_length)
    # assign with numpy indexing
    pen_up_feature[pen_up_index[:-1]] = 1

    # 2) delta_x, delta_y
    # combine all the strokes into a single stroke (N, 2)
    combined_trace = np.concatenate(traces) # concatenation
    # compute delta_x, delta_y
    deltas = combined_trace[1:] - combined_trace[:-1] # (delta x, delta y) # element-wise operators

    # 3) compute Euclidean distances between consecutive points
    deltas_squared = deltas ** 2    # ( delta_x ^ 2, delta_y ^ 2) # element-wise operators
    d = np.sqrt(np.sum(deltas_squared, axis = 1)) # d = sqrt( delta_x ^ 2 + delta_y ^ 2),  d.shape = (3444,)

    # aggregation functions

    # 4) merge all the features (delta_x, delta_y, d, pen_up)
    # shape: (3444, 2), (3444,), (3444,)
    # shape: (3444, 2), (3444,1), (3444,1)
    # pytorch: create new axis -> unsqueeze(dim = x)
    feature = np.concatenate([deltas, d[:, np.newaxis], pen_up_feature[:, np.newaxis]], axis=1)

    # 5) remove any zero length consecutive points
    # index -> np.where(feature[:, 2]  != 0)
    feature_without_zeros = feature[np.where(feature[:, 2]  != 0)] # advance indexing

    # 6) normalize the delta_x and delta_y by Euclidean distance d
    #  (delta_x, delta_y, d, pen_up) ->  (delta_x/d, delta_y/d, d, pen_up)
    feature_without_zeros[:, :2] /= feature_without_zeros[:, 2][:, np.newaxis] # broadcasting (3444, 2) / (3444, 1)
    feature = feature_without_zeros

    return feature


# test code for feature extraction
inkml_path = 'dataset/crohme2019/crohme2019/valid/18_em_0.inkml'
ink = Inkml(inkml_path)
ink.view()

traces = ink.getTraces()
feature = feature_extraction(traces)


import numpy.testing as npt
assert feature.shape == (614, 4)
npt.assert_allclose(feature[:, :3].mean(axis=0), np.array([ 0.17677799,  0.29519369, 11.35540311]))
npt.assert_allclose(feature[:,:3].var(axis=0), np.array([3.75390418e-01, 5.06219812e-01, 4.19017361e+02])
)

#@title Demonstrate advance indexing (filtering)

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # 2d array


np.where(a != 6) # 2d index -> 1d index for columns


# a[:, np.where(a[1, :] != 6)[0]] # filtered array
a[np.where(a[:, :] != 6) ]

#@title Example with squeeze and unsqueeze

import torch

a = torch.randn(10)
a.shape
a.unsqueeze(0).unsqueeze(0).squeeze(0).squeeze(0).shape

"""## Task 3: Build Lightning Data Module via Dataloader

Revise [this tutorial](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html#preparing-your-data-for-training-with-dataloaders) to see how you can prepare your data for training with DataLoader.

Then refer to this [documentation](https://pytorch.org/docs/stable/data.html#loading-batched-and-non-batched-data) to understand how DataLoader in PyTorch loads Batched or Non-Batched data.

> **TASK:** Write the dataloader with custom collate function to pad the input and target sequence

For a better understanding of the importance of handling variable-length sequences in deep learning models, it is crucial to format and pad the data appropriately to ensure consistency during training. Learn more about this topic [here](https://plainenglish.io/blog/understanding-collate-fn-in-pytorch-f9d1742647d3).

> _**Hint 1**: use `torch.nn.utils.rnn.pad_sequence` to pad the input and target sequences. Read more about this function [here](https://pytorch.org/docs/stable/generated/torch.nn.utils.rnn.pad_sequence.html)._

> _**Hint 2**: read Example 3 from this [tutorial](https://www.programiz.com/python-programming/methods/built-in/zip) to unpack data using `zip()`._
"""

def collate_fn(batch):
    """Create batch"""
    # TODO: your custom colate function here
    features, labels, input_lens, label_lens = zip(*batch)
    features = torch.nn.utils.rnn.pad_sequence(features, batch_first=True)
    labels = torch.nn.utils.rnn.pad_sequence(labels, batch_first=True)
    input_lens = torch.tensor(input_lens)
    label_lens = torch.tensor(label_lens)
    # features, labels, input_lens, label_lens should be torch.tensor
    return features, labels, input_lens, label_lens

temp =annotations
dataset = InkmlDataset(annotation = temp, root_dir="dataset/crohme2019", vocab = Vocab("vocab.json"))  # TODO: initialize a dataset

features, labels, input_lens, label_lens = collate_fn([dataset[0], dataset[1]])

import numpy.testing as npt

assert type(input_lens) == torch.Tensor
assert type(label_lens) == torch.Tensor

"""> **TASK:** implement InkmlDataset_PL Lightning Datamodule"""

class InkmlDataset_PL(pl.LightningDataModule):
    """
    PyTorch Lightning data module for handling the INKML dataset.
    """

    def __init__(
        self,
        batch_size: int = 10,
        workers: int = 5,
        train_data: str = "",
        val_data: str = "",
        test_data: str = "",
        root_dir: str = "dataset",
        vocab_file='vocab.json',
    ):
        super().__init__()
        self.batch_size = batch_size
        self.workers = workers
        self.train_data = train_data
        self.val_data = val_data
        self.test_data = test_data
        self.root_dir = root_dir
        self.vocab = Vocab(vocab_file)

    def setup(self, stage=None):
        if stage == "fit" or stage is None:
            self.train_dataset = InkmlDataset(self.train_data, root_dir=self.root_dir, vocab=self.vocab)
            self.val_dataset = InkmlDataset(self.val_data, root_dir=self.root_dir, vocab=self.vocab) # Initialize val_dataset here
        if stage == "test" or stage is None:
            self.test_dataset = InkmlDataset(self.test_data, root_dir=self.root_dir, vocab=self.vocab)


    def custom_collate_fn(self, data):
        # TODO: provide your custom collate function here.
        padded_traces, padded_labels, len_traces, len_labels = collate_fn(data)

        return padded_traces, padded_labels, len_traces, len_labels

    def train_dataloader(self):
        return DataLoader(
            self.train_dataset,
            batch_size=self.batch_size,
            num_workers=self.workers,
            collate_fn=self.custom_collate_fn,
            shuffle = True,
        )

    def test_dataloader(self):
        return DataLoader(
            self.test_dataset,
            batch_size=self.batch_size,
            num_workers=self.workers,
            collate_fn=self.custom_collate_fn,
        )

"""## Task 4: Build Model

In this task, we will build a model that will be used to train the dataset.
The model will be a simple RNN with a single layer of Bidirectional LSTM cells. The model will take the input from the dataset and output the predicted sequence of symbols and relations and will use CTC loss to train the model.

The model will be built using PyTorch and will use the following architecture

> _We highly recommend you to read through this [tutorial on Creating a model using Pytorch](https://pytorch.org/tutorials/beginner/introyt/modelsyt_tutorial.html) and understand the basic building blocks of a model in PyTorch._

> _**ATTENTION** Below is the architecture for the model. You must **STRICTLY** follow the architecture and the parameters mentioned below._
> | Layer Type         | Configuration                              |
> |--------------------|--------------------------------------------|
> | Input              | Sequence of vectors with `input_size=4`    |
> | LSTM Layer         | `hidden_size=256`, `num_layers=2`          |
> |                    | `batch_first=True`                         |
> |                    | `bidirectional=True`                       |
> | LSTM Output        | Output shape: `(batch_size, seq_len, hidden_size*2)`|
> | Fully Connected    | `Linear(hidden_size*2, num_classes)`|
> | Activation         | `LogSoftmax(dim=...)`|
> | Output             | `(batch_size, seq_len, num_classes)`|
"""

class LSTM_TemporalClassification(nn.Module):
    def __init__(self, input_size, hidden_size, num_layers, num_classes):
        super(LSTM_TemporalClassification, self).__init__()
        # TODO: declare layers here
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True, bidirectional=True)
        self.fc = nn.Linear(hidden_size*2, num_classes)
        self.softmax = nn.LogSoftmax(dim=2)
    def forward(self, x):
        # TODO: write calculation process here
        x, _ = self.lstm(x)
        x = self.fc(x)
        x = self.softmax(x)
        return x

# Test your implementation
model = LSTM_TemporalClassification(4, 256, 2, 109)
assert model.forward(torch.rand((10, 100, 4))).shape == (10, 100, 109)

"""## Task 5: Understand CTC Loss

In this task, we will understand how to use CTC loss to train the model. The CTC loss is used to train the model to predict the sequence of symbols and relations from the input sequence of features.

> _For deeper understanding of CTC loss, read this [blog](https://distill.pub/2017/ctc/)_

Check out this [Pytorch documentation](https://pytorch.org/docs/stable/generated/torch.nn.CTCLoss.html) to learn more about its implementation.

> _Hint: read the expected input and output of the CTC loss function. The input should be of shape `(T, N, C)` where T is the length of the input sequence, N is the batch size, and C is the number of classes. The target should be of shape `(N, S)` where S is the length of the target sequence._

After understanding how CTC Loss works, we can proceed to implement it in our model.

## Task 6: Build Lightning Module

In this task, we will build a Lightning module that will be used to train the model. The Lightning module will mostly be used to define the training and validation steps, as well as the optimizer and learning rate scheduler.

> _More on building Lightning module can be found [here](https://lightning.ai/docs/pytorch/stable/common/lightning_module.html). You should read about core methods to know what to implement in your module._
"""

relation_tokens = {"Above", "Below", "Inside", "NoRel", "Right", "Sub", "Sup"}

import torch
import torchaudio
from torchaudio.models.decoder import cuda_ctc_decoder


class CUDA_CTC_Decoder(torch.nn.Module):
    def __init__(self, vocab):
        super().__init__()
        self.vocab = vocab
        self.blank = vocab.char2idx[""]  # blank token index, e.g., 0

        # Prepare labels list: index -> character
        labels = [vocab.idx2char[i] for i in range(len(vocab.idx2char))]

        # Initialize CUDA-accelerated CTC decoder
        self.decoder = cuda_ctc_decoder(
            tokens=labels,
            beam_size=10,
            nbest=1,
            blank_skip_threshold=0.95,
        )
        def forward(self, emission: torch.Tensor, encoder_out_lens: torch.Tensor) -> list:
            if emission.dim() == 2:
                emission = emission.unsqueeze(0)  # (1, T, C)


            results = self.decoder(emission, encoder_out_lens)
            predictions = []

            for res in results:
                tokens = res[0].tokens
                chars = [self.vocab.idx2char[idx] for idx in tokens]
                predictions.append(chars)

            return predictions

#This from task 10
def edit_distance(pred_seq: list, label_seq: list):
    # TODO: implement Token Edit distance
    m, n = len(pred_seq), len(label_seq)
    dp = [[0] * (n+1) for _ in range(m + 1)]
    # Fill the first column:
    for i in range(m+1):
        dp[i][0] = i
    # Fill the first row:
    for j in range(n+1):
        dp[0][j] = j
    # Fill in the rest of the table
    for i in range(1, m+1):
        for j in range(1, n+1):
            if pred_seq[i-1] == label_seq[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
    distance = dp[m][n]
    return distance
def split_tokens(tokens):
    symbols = [t for t in tokens if t not in relation_tokens]
    relations = [t for t in tokens if t in relation_tokens]
    return symbols, relations
class MathOnlineModel(pl.LightningModule):
    def __init__(
        self,
        lr=0.001,
        input_size=4,
        output_size=109,
        hidden_size=256,
        num_layers=2,
        decoder=None,
        vocab=None,
        relation_tokens=None,
    ):
        super().__init__()
        self.model = LSTM_TemporalClassification(
            input_size, hidden_size, num_layers, output_size
        )
        # TODO: define CTC Loss Function here.
        self.criterion = nn.CTCLoss(blank=0, zero_infinity=True)
        self.lr = lr
        self.vocab = vocab
        self.relation_labels = relation_tokens or []
        self.relation_indices = torch.tensor([
            self.vocab.get_vocab()[rel] for rel in self.relation_labels
        ], dtype=torch.long)
        self.lambda_constraint = 0.1
        self.decoder = decoder if decoder is not None else self.greedy_decoder
    def greedy_decoder(self, Logit, seq_len):
        preds = torch.argmax(Logit, dim=-1)
        preds = preds[:seq_len.item()]

        decoded = []
        previous = -1
        for p in preds:
            p = p.item()
            if p != 0 and p != previous:
                decoded.append(self.vocab.idx2char[p])
            previous = p

        return decoded



    def forward(self, x):
        return self.model(x)

    def training_step(self, batch, batch_idx):
        x, y, x_lens, y_lens = batch
        # TODO: your code to calculate loss
        logits = self(x)
        probs = torch.nn.functional.softmax(logits, dim=-1)
        logits = logits.permute(1, 0, 2)
        loss_ctc = self.criterion(logits, y, x_lens, y_lens)

        batch_size, seq_len, _ = probs.shape
        device = probs.device

        # Get only probabilities for relation classes
        rel_probs = probs[:, :, self.relation_indices.to(device)]  # (B, T, R)
        p_rel = rel_probs.sum(dim=-1)
        # Bonus 2
        pen_down_mask = x[:, :, -1]
        pen_up_mask = 1.0 - pen_down_mask

        loss_constraint = -torch.log((1.0 - (p_rel * pen_up_mask).sum(dim=-1).clamp(max=1.0)) + 1e-8).mean()

        # Total loss
        loss = loss_ctc + self.lambda_constraint * loss_constraint

        self.log("train_loss", loss, prog_bar=True, on_step=True, on_epoch=True)
        self.log("loss_ctc", loss_ctc, prog_bar=False)

        self.log("loss_constraint", loss_constraint, prog_bar=False)
        return loss

    def validation_step(self, batch, batch_idx):
        x, y, x_lens, y_lens = batch


        # TODO: your code to calculate loss
        logits = self(x)
        logits = F.log_softmax(logits, dim=-1)
        logits = logits.permute(1, 0, 2)
        loss = self.criterion(logits, y, x_lens, y_lens)
        self.log("val_loss", loss, prog_bar=True, on_step=False, on_epoch=True)
        x_lens = x_lens.to(logits.device).to(torch.int32)
        #decode predictions
        decoded_preds = []
        for i in range(logits.shape[1]):
            logit = logits[:, i, :]
            seq_len = x_lens[i].unsqueeze(0)
            pred = self.decoder(logit, seq_len)

            if len(pred) == 0:
                decoded_preds.append([])
            elif isinstance(pred[0], list):
                decoded_preds.append([item for sublist in pred for item in sublist])
            else:
                decoded_preds.append(pred)
        #decode targets
        decoded_targets = []
        for i in range(y.shape[0]):
            label = y[i][:y_lens[i]].tolist()
            label_tokens = [self.vocab.get_vocab_idx_2_char()[idx] for idx in label]
            decoded_targets.append(label_tokens)

        # Compute edit distance and WER
        sym_edit = sym_total = rel_edit = rel_total = wer_edit = wer_total = 0
        exact_match = total = 0

        for pred, target in zip(decoded_preds, decoded_targets):
            pred_sym, pred_rel = split_tokens(pred)
            target_sym, target_rel = split_tokens(target)
            sym_edit += edit_distance(pred_sym, target_sym)
            sym_total += len(target_sym)
            rel_edit += edit_distance(pred_rel, target_rel)
            rel_total += len(target_rel)
            wer_edit += edit_distance(pred, target)
            wer_total += len(target)
            # Exact match
            if pred == target:
                exact_match += 1
            total += 1

        wer_sym = sym_edit / sym_total if sym_total > 0 else 0.0
        wer_rel = rel_edit / rel_total if rel_total > 0 else 0.0
        wer = wer_edit / wer_total if wer_total > 0 else 0.0
        exact_match_acc = exact_match / total if total > 0 else 0.0

        self.log("wer_sym", wer_sym, prog_bar=True, on_step=False, on_epoch=True)
        self.log("wer_rel", wer_rel, prog_bar=True, on_step=False, on_epoch=True)
        self.log("val_wer", wer, prog_bar=True, on_step=False, on_epoch=True)
        self.log("val_exact_match", exact_match_acc, prog_bar=True, on_step=False, on_epoch=True)
        self.log("val_loss", loss, prog_bar=True, on_step=False, on_epoch=True)
        return {
            "val_loss": loss,
            "wer_sym": wer_sym,
            "wer_rel": wer_rel,
            "val_wer": wer,
            "val_exact_match": exact_match_acc,
        }

    def test_step(self, batch, batch_idx):
        x, y, x_lens, y_lens = batch

        # TODO: your code to calculate loss
        logits = self(x)
        logits = logits.permute(1, 0, 2)
        loss = self.criterion(logits, y, x_lens, y_lens)
        self.log("val_loss", loss, prog_bar=True, on_step=False, on_epoch=True)

        x_lens = x_lens.to(logits.device).to(torch.int32)
        #decode predictions
        decoded_preds = []
        for i in range(logits.shape[1]):
            logit = logits[:, i, :]
            seq_len = x_lens[i].unsqueeze(0)
            pred = self.decoder(logit, seq_len)
            if pred:  # make sure pred is not empty
                if isinstance(pred[0], list):
                    decoded_preds.append([item for sublist in pred for item in sublist])
                else:
                    decoded_preds.append(pred)
            else:
                decoded_preds.append([])
        #decode targets
        decoded_targets = []
        for i in range(y.shape[0]):
            label = y[i][:y_lens[i]].tolist()
            label_tokens = [self.vocab.get_vocab_idx_2_char()[idx] for idx in label]
            decoded_targets.append(label_tokens)


        sym_edit = sym_total = rel_edit = rel_total = wer_edit = wer_total = 0
        exact_match = total = 0
        for pred, target in zip(decoded_preds, decoded_targets):
            pred_sym, pred_rel = split_tokens(pred)
            target_sym, target_rel = split_tokens(target)
            sym_edit += edit_distance(pred_sym, target_sym)
            sym_total += len(target_sym)
            rel_edit += edit_distance(pred_rel, target_rel)
            rel_total += len(target_rel)
            wer_edit += edit_distance(pred, target)
            wer_total += len(target)
            if pred == target:
                exact_match += 1
            total += 1

        wer_sym = sym_edit / sym_total if sym_total > 0 else 0.0
        wer_rel = rel_edit / rel_total if rel_total > 0 else 0.0
        wer = wer_edit / wer_total if wer_total > 0 else 0.0
        exact_match_acc = exact_match / total if total > 0 else 0.0
        self.log("wer_sym", wer_sym, prog_bar=True, on_step=False, on_epoch=True)
        self.log("wer_rel", wer_rel, prog_bar=True, on_step=False, on_epoch=True)
        self.log("val_wer",     wer, prog_bar=True, on_step=False, on_epoch=True)
        self.log("val_exact_match", exact_match_acc, prog_bar=True, on_step=False, on_epoch=True)
        return {
            "val_loss": loss,
            "wer_sym": wer_sym,
            "wer_rel": wer_rel,
            "val_wer": wer,
            "val_exact_match": exact_match_acc,
        }

        #Bonus 2
    def compute_constraint_loss(self, probs, x):
        pen_down_mask = x[:, :, -1]
        pen_up_mask = 1.0 - pen_down_mask

        rel_probs = probs[:, :, self.relation_indices.to(probs.device)]
        p_rel = rel_probs.sum(dim=-1)

        loss_constraint = -torch.log((1.0 - (p_rel * pen_up_mask).sum(dim=-1).clamp(max=1.0)) + 1e-8).mean()

        return loss_constraint

    def configure_optimizers(self):
        return torch.optim.Adam(self.model.parameters(), lr=self.lr)

"""## Task 7: Train the Model with PyTorch Lightning

Read more about Training with PyTorch Lightning [here](https://lightning.ai/docs/pytorch/stable/common/trainer.html) and understand how to use the Trainer class to train the model.

From the documentation:

> The Lightning Trainer does much more than just “training”. Under the hood, it handles all loop details for you, some examples include:
> - Automatically enabling/disabling grads
> - Running the training, validation and test dataloaders
> - Calling the Callbacks at the appropriate times
> - Putting batches and computations on the correct devices

> **IMPORTANT**: You must config your WandB logger to log the training and validation metrics. Without this, your work will not be graded.
"""

import os
import wandb
student_id = "10423161"  # TODO: replace with your student ID
api_key = os.environ.get("WANDB_API_KEY", "846333a1c60e83ae7089be296a7772cd70a2655b")  # configure your wandb key here

if api_key == "":
    raise ValueError("Please set your wandb key in the code or in the environment variable WANDB_API_KEY")
else:
    print("WandB API key is set. Proceeding with login...")

wandb.login(key=api_key)

wandb.finish()

ckpt_path = '/kaggle/input/input-checkpoint/checkpoint/epoch30-val_loss0.6375.ckpt'

from pytorch_lightning.loggers import WandbLogger
from pytorch_lightning.callbacks import LearningRateMonitor, ModelCheckpoint
from pytorch_lightning import Trainer
wandb_logger = WandbLogger(
    entity="cuong-nt-vgu-ai-2025",  # DO NOT CHANGE THIS
    project="math_online_2025", # DO NOT CHANGE THIS
    name=f"{student_id}_run_2",
    config={
        "student_id": student_id,  # DO NOT CHANGE THIS
        "model": "LSTM_TemporalClassification",
        # your hyperparameters
        "batch_size": 32,
        "learning_rate": 0.001,
        "hidden_size": 256,
        "num_layers": 2,
        "input_size": 4,
        "output_size": 109,
        "max_epochs": 40,

    },
    log_model=True,
    save_dir="wandb_logs",
)

# Load vocabulary and initialize model and datamodule
vocab = Vocab('vocab.json')
relation_tokens = {"Above", "Below", "Inside", "NoRel", "Right", "Sub", "Sup"}

model = MathOnlineModel(vocab=vocab, relation_tokens=relation_tokens)


dm = InkmlDataset_PL(root_dir='dataset/crohme2019',
                       train_data='dataset/crohme2019_train.txt',
                       val_data='dataset/crohme2019_valid.txt',
                       test_data='dataset/crohme2019_test.txt',
                       vocab_file='vocab.json',
                       batch_size=32,
                      workers=4
                     )
checkpoint_callback = ModelCheckpoint(
    dirpath='checkpoint',
    filename='{epoch}-{val_loss:.4f}',
    save_top_k=5,
    monitor='val_loss',
    mode='min',
    save_weights_only=False,
    verbose=True
)
model = MathOnlineModel(lr=0.001,
    input_size=4,
    output_size=109,
    hidden_size=256,
    num_layers=2,
    vocab=dm.vocab)
trainer = Trainer(
    callbacks = [
        LearningRateMonitor(logging_interval='step'),
        ModelCheckpoint(filename='{epoch}-{val_loss:.4f}', save_top_k=5, monitor='val_loss', mode='min'),
    ],
    logger = wandb_logger,
    check_val_every_n_epoch=1,
    fast_dev_run=False,  # enable for testing model
    default_root_dir='checkpoint',
    deterministic=False,
    max_epochs=20,
    log_every_n_steps=50,
    devices = "auto",
)
trainer.fit(model, dm)

"""**Requirements:**
- Validation loss (val_loss < 0.7)

**Tips on training:**
- Debug with **fast_dev_run**:
Before run the training process, it is better to make a quick check of training and validation loop. Set fast_dev_run=True, then run the trainer and check if there is any bug exist.
- Training initially with **small batch size**:
In practice, training with CTC loss converges slowly for large batch size. To accelerate convergence, training with small batch size first, save model, then, train with large batch size.
- Train more epochs by setting:

```python
trainer = Trainer(
    ...
    max_epochs=20,
    ...
)
```

## Task 8: Test your model

Run the test set and check the accuracy of your model. The test set is used to evaluate the performance of the model on unseen data.
"""

trainer = Trainer(
    devices=1,
)

# Load the model from a checkpoint
model = MathOnlineModel.load_from_checkpoint(
    "path/to/your_checkpoint.ckpt",
)

# Initialize the data module
dm = InkmlDataset_PL(
    root_dir="dataset",
    train_annotation="",
    validation_annotation="",
    test_annotation="",
    vocab_file="vocab.json",
    batch_size=32,
    num_workers=4,
)

# Test the model
trainer.test(model, datamodule=dm)

"""## Task 9: Inference

The output of networks need to process by a decoding step.

- Greedy decode: Your task is to implement greedy decoding method. Which converts the output into a string of symbols and relations (same form with labels). Greedy decoder produce the best path by removing consecutive repeated symbols/relations and then remove \<blank\>

> **TASK**: Implement the greedy decoder for the model output.

Based on GreedyCTCDecoder class from this [link](https://pytorch.org/audio/main/tutorials/asr_inference_with_ctc_decoder_tutorial.html#greedy-decoder), write decoding for an output. Your implementation should handle the output of the model and convert it into a string of symbols and relations, ensuring to remove consecutive repeated symbols/relations and the blank token.
"""

class GreedyCTCDecoder(torch.nn.Module):
    def __init__(self, vocab):
        super().__init__()
        self.vocab = vocab
        self.blank = vocab.word2index[""]

    def forward(self, emission: torch.Tensor) -> list:
        """Given a sequence emission over labels, get the best path
        Args:
          emission (Tensor): Logit tensors. Shape `[seq_len, num_label]`.

        Returns:
          list: The resulting transcript
        """
        # TODO: implement the decoder

        return output_seq_list

"""Then you can test the output of your model here"""

model = MathOnlineModel.load_from_checkpoint('path/to/your_checkpoint.ckpt')
model.eval()

dataset = InkmlDataset()
feature, label, input_len, label_len = dataset.__getitem__(0)

vocab = ...
greedy_decoder = GreedyCTCDecoder(vocab)

decoded_output = greedy_decoder.forward(...)

# possible output if your training work well
# decoded -> ['\\phi', 'Right', '(', 'Right', '0', 'Right', '(', 'Right', 'n', 'Right', ')', 'Right', ')']

"""## Task 10: Implement calculation metric for training"""

def edit_distance(pred_seq: list, label_seq: list):
    # TODO: implement Token Edit distance
    m, n = len(pred_seq), len(label_seq)
    dp = [[0] * (n+1) for _ in range(m + 1)]
    # Fill the first column:
    for i in range(m+1):
        dp[i][0] = i
    # Fill the first row:
    for j in range(n+1):
        dp[0][j] = j
    # Fill in the rest of the table
    for i in range(1, m+1):
        for j in range(1, n+1):
            if pred_seq[i-1] == label_seq[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
    distance = dp[m][n]
    return distance


# Test your implementation
assert (
    edit_distance(
        [
            "\\phi",
            "Right",
            "(",
            "Right",
            "0",
            "Right",
            "(",
            "Right",
            "n",
            "Right",
            ")",
            "Right",
            ")",
        ],
        [
            "\\phi",
            "Right",
            "(",
            "Right",
            "\\phi",
            "Right",
            "(",
            "Right",
            "n",
            "Right",
            ")",
            "Right",
            ")",
        ],
    )
    == 1
)

"""> **TASK**: Implement word error rate metric (wer) for training,  validation and testing in your model.
>
> $wer = \frac{total\ edit\ distance (predict\ sequence,\ target\ sequence)}{total\ target\ sequence\ length}$

**Steps to process:**

- Decode the predicted sequences to obtain the text output.
- Calculate the total edit distance between the predicted and target sequences.
- Compute the word error rate using the formula provided.
- Log the WER metric during training and validation.

**Continue to train the model**

- Load the latest trained model:

```
model = MathOnlineModel.load_from_checkpoint('path/to/your/checkpoint.ckpt')
```
- Change config of ModelCheckPoint to monitor the new metric (val_wer) instead.

```
        ModelCheckpoint(filename='{epoch}-{val_loss:.4f}', save_top_k=5, monitor='val_loss', mode='min')
        
      --> ModelCheckpoint(filename='{epoch}-{val_wer:.4f}', save_top_k=5, monitor='val_wer', mode='min'),

```

## **BONUS TASKS**

The following tasks are optional and can be done for extra credit to the final exam.

### **Bonus 1**: Add metric to evaluate accuracy of symbols and relations seperately *(+0.5pt)*

**Add the metrics: wer for symbols and wer for relations**
```
self.log('wer_sym',...)
self.log('wer_rel',...)
```

### **Bonus 2**: Modify loss function to constraint the output of relations at the time step of pen-up *(+1pt)*
Modify loss function to constrain the output of relations at the timestep of pen-up.

The idea: Provide a masked sequence such that the position of pen-up is masked, the additional loss would penaltize all the relations output to the timestep that has been masked.


**Loss function to constraint relation output**

```
pen_down: a masked sequence, where len(pen_down) = len(input_sequence)
        and pen_down[t] == 1 (pen down), pen_down[t] == 0 (pen up)
p_rel: total probability of relation outputs for every time step t, len(p_rel) = len(input_sequence), p_rel[t] = sum(p[t][rel] for rel in ['Sub', 'Sup', 'Above', ...])

The loss is defined as:

    L_{constraint} = -log(1 - sum(p_rel * pen_down))
    
Explanation:

    Minimize L_{constraint} (value range of (-inf, 0)) would make maximize of (1 - sum(p_rel * pen_down)), or making sum(p_rel * mask) -> 0, then it will penalize the relation output on pen_down timesteps.
```

**Apply constraint loss function with ctc loss**

```
    L = loss_{ctc} + \lambda * L_{constraint}
    
where \lambda is a weighted parameter to control balance between the two losses.
   
```


You can also find it in a published paper here, section 3.4:
https://arxiv.org/pdf/2105.10156

### **Bonus 3**: Visualize model prediction by timesteps and probability of softmax outputs *(+0.5pt)*

![alt text](https://github.com/fuisl/crohme-ctc/blob/6722b97ec2000afcd16068220f0b1b83b3134ff8/assets/graph_with_prob.png?raw=true)

### **Bonus 4**: Use CUDA CTC Decoder to optimize decoding process in model *(+0.5pt)*

Follow the instructions via this [link](https://pytorch.org/audio/main/tutorials/asr_inference_with_ctc_decoder_tutorial.html#cuda-ctc-decoder) to implement CUDA CTC decoder in your model.
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
from torchmetrics.text import EditDistance

import numpy as np
import pandas as pd
import os

import pytorch_lightning as pl
from pytorch_lightning import Trainer
from pytorch_lightning.callbacks import ModelCheckpoint, LearningRateMonitor
from pytorch_lightning.loggers import TensorBoardLogger, WandbLogger
# import wandb # Uncomment and configure wandb if you plan to use it

import xml.etree.ElementTree as ET
from torch.nn.utils.rnn import pad_sequence

import matplotlib.pyplot as plt
from collections.abc import Sequence
from typing import Literal, Optional, Union

import json

class LSTM_TemporalClassification(nn.Module):
    def __init__(self, input_size, hidden_size, num_layers, num_classes):
        super(LSTM_TemporalClassification, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True, bidirectional=True)
        self.fc = nn.Linear(hidden_size * 2, num_classes)
        self.log_softmax = nn.LogSoftmax(dim=2)

    def forward(self, x):
        x, _ = self.lstm(x)
        x = self.fc(x)
        x = self.log_softmax(x)
        return x

class MathOnlineModel(pl.LightningModule):
    def __init__(
        self,
        lr=0.001,
        input_size=4,
        output_size=109,
        hidden_size=256,
        num_layers=2,
        decoder=None,
        vocab=None,
        relation_tokens=None,
    ):
        super().__init__()
        self.model = LSTM_TemporalClassification(
            input_size, hidden_size, num_layers, output_size
        )
        self.criterion = nn.CTCLoss(blank=0, zero_infinity=True)
        self.lr = lr
        self.vocab = vocab
        self.relation_labels = relation_tokens or []
        if self.vocab: # Check if vocab is not None before accessing it
            self.relation_indices = torch.tensor([
                self.vocab.get_vocab()[rel] for rel in self.relation_labels
            ], dtype=torch.long)
        else:
            self.relation_indices = torch.tensor([], dtype=torch.long) # Initialize as empty tensor if vocab is None
        self.lambda_constraint = 0.1
        self.decoder = decoder if decoder is not None else self.greedy_decoder

    def greedy_decoder(self, Logit, seq_len):
        preds = torch.argmax(Logit, dim=-1)
        preds = preds[:seq_len.item()]

        decoded = []
        previous = -1
        for p in preds:
            p = p.item()
            if p != 0 and p != previous:
                decoded.append(self.vocab.idx2char[p])
            previous = p

        return decoded

    def forward(self, x):
        return self.model(x)

    def training_step(self, batch, batch_idx):
        x, y, x_lens, y_lens = batch
        logits = self(x)
        probs = torch.nn.functional.softmax(logits, dim=-1)
        logits = logits.permute(1, 0, 2)
        loss_ctc = self.criterion(logits, y, x_lens, y_lens)

        # Bonus 2: Constraint Loss
        if self.relation_indices.numel() > 0: # Check if relation_indices is not empty
            loss_constraint = self.compute_constraint_loss(probs, x)
            loss = loss_ctc + self.lambda_constraint * loss_constraint
            self.log("loss_constraint", loss_constraint, prog_bar=False)
        else:
            loss = loss_ctc


        self.log("train_loss", loss, prog_bar=True, on_step=True, on_epoch=True)
        self.log("loss_ctc", loss_ctc, prog_bar=False)
        return loss

    def validation_step(self, batch, batch_idx):
        x, y, x_lens, y_lens = batch
        logits = self(x)
        logits = F.log_softmax(logits, dim=-1)
        logits = logits.permute(1, 0, 2)
        loss = self.criterion(logits, y, x_lens, y_lens)
        self.log("val_loss", loss, prog_bar=True, on_step=False, on_epoch=True)
        x_lens = x_lens.to(logits.device).to(torch.int32)

        decoded_preds = []
        for i in range(logits.shape[1]):
            logit = logits[:, i, :]
            seq_len = x_lens[i].unsqueeze(0)
            pred = self.decoder(logit, seq_len)

            if len(pred) == 0:
                decoded_preds.append([])
            elif isinstance(pred[0], list):
                decoded_preds.append([item for sublist in pred for item in sublist])
            else:
                decoded_preds.append(pred)

        decoded_targets = []
        for i in range(y.shape[0]):
            label = y[i][:y_lens[i]].tolist()
            label_tokens = [self.vocab.idx2char[idx] for idx in label]
            decoded_targets.append(label_tokens)

        sym_edit = sym_total = rel_edit = rel_total = wer_edit = wer_total = 0
        exact_match = total = 0

        for pred, target in zip(decoded_preds, decoded_targets):
            pred_sym, pred_rel = split_tokens(pred)
            target_sym, target_rel = split_tokens(target)
            sym_edit += edit_distance(pred_sym, target_sym)
            sym_total += len(target_sym)
            rel_edit += edit_distance(pred_rel, target_rel)
            rel_total += len(target_rel)
            wer_edit += edit_distance(pred, target)
            wer_total += len(target)

            if pred == target:
                exact_match += 1
            total += 1

        wer_sym = sym_edit / sym_total if sym_total > 0 else 0.0
        wer_rel = rel_edit / rel_total if rel_total > 0 else 0.0
        wer = wer_edit / wer_total if wer_total > 0 else 0.0
        exact_match_acc = exact_match / total if total > 0 else 0.0

        self.log("wer_sym", wer_sym, prog_bar=True, on_step=False, on_epoch=True)
        self.log("wer_rel", wer_rel, prog_bar=True, on_step=False, on_epoch=True)
        self.log("val_wer", wer, prog_bar=True, on_step=False, on_epoch=True)
        self.log("val_exact_match", exact_match_acc, prog_bar=True, on_step=False, on_epoch=True)

        return {
            "val_loss": loss,
            "wer_sym": wer_sym,
            "wer_rel": wer_rel,
            "val_wer": wer,
            "val_exact_match": exact_match_acc,
        }

    def test_step(self, batch, batch_idx):
        x, y, x_lens, y_lens = batch
        logits = self(x)
        logits = logits.permute(1, 0, 2)
        loss = self.criterion(logits, y, x_lens, y_lens)
        self.log("val_loss", loss, prog_bar=True, on_step=False, on_epoch=True)

        x_lens = x_lens.to(logits.device).to(torch.int32)
        decoded_preds = []
        for i in range(logits.shape[1]):
            logit = logits[:, i, :]
            seq_len = x_lens[i].unsqueeze(0)
            pred = self.decoder(logit, seq_len)
            if pred:
                if isinstance(pred[0], list):
                    decoded_preds.append([item for sublist in pred for item in sublist])
                else:
                    decoded_preds.append(pred)
            else:
                decoded_preds.append([])

        decoded_targets = []
        for i in range(y.shape[0]):
            label = y[i][:y_lens[i]].tolist()
            label_tokens = [self.vocab.idx2char[idx] for idx in label]
            decoded_targets.append(label_tokens)

        sym_edit = sym_total = rel_edit = rel_total = wer_edit = wer_total = 0
        exact_match = total = 0
        for pred, target in zip(decoded_preds, decoded_targets):
            pred_sym, pred_rel = split_tokens(pred)
            target_sym, target_rel = split_tokens(target)
            sym_edit += edit_distance(pred_sym, target_sym)
            sym_total += len(target_sym)
            rel_edit += edit_distance(pred_rel, target_rel)
            rel_total += len(target_rel)
            wer_edit += edit_distance(pred, target)
            wer_total += len(target)
            if pred == target:
                exact_match += 1
            total += 1

        wer_sym = sym_edit / sym_total if sym_total > 0 else 0.0
        wer_rel = rel_edit / rel_total if rel_total > 0 else 0.0
        wer = wer_edit / wer_total if wer_total > 0 else 0.0
        exact_match_acc = exact_match / total if total > 0 else 0.0
        self.log("wer_sym", wer_sym, prog_bar=True, on_step=False, on_epoch=True)
        self.log("wer_rel", wer_rel, prog_bar=True, on_step=False, on_epoch=True)
        self.log("val_wer",     wer, prog_bar=True, on_step=False, on_epoch=True)
        self.log("val_exact_match", exact_match_acc, prog_bar=True, on_step=False, on_epoch=True)
        return {
            "val_loss": loss,
            "wer_sym": wer_sym,
            "wer_rel": wer_rel,
            "val_wer": wer,
            "val_exact_match": exact_match_acc,
        }

    def compute_constraint_loss(self, probs, x):
        pen_down_mask = x[:, :, -1]
        pen_up_mask = 1.0 - pen_down_mask

        rel_probs = probs[:, :, self.relation_indices.to(probs.device)]
        p_rel = rel_probs.sum(dim=-1)

        loss_constraint = -torch.log((1.0 - (p_rel * pen_up_mask).sum(dim=-1).clamp(max=1.0)) + 1e-8).mean()

        return loss_constraint


    def configure_optimizers(self):
        return torch.optim.Adam(self.model.parameters(), lr=self.lr)